{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Chapter 3\\\\music-player\\\\react-player\\\\src\\\\components\\\\LibrarySong.js\";\nimport React from \"react\";\nimport { playAudio } from \"../util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); //Add active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n    play;\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n\n    console.log(\"hi\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["C:/React/Chapter 3/music-player/react-player/src/components/LibrarySong.js"],"names":["React","playAudio","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","newSongs","map","active","play","playPromise","current","undefined","then","audio","console","log","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,SAA1B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,SANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQd;AACJ,QAAMC,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD8B,CAE9B;;AACA,UAAMQ,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAWT,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGH,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGV,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAaAJ,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACAG,IAAAA,IAAI;;AACJ,QAAIN,SAAJ,EAAe;AACb,YAAMO,WAAW,GAAGR,QAAQ,CAACS,OAAT,CAAiBF,IAAjB,EAApB;;AACA,UAAIC,WAAW,KAAKE,SAApB,EAA+B;AAC7BF,QAAAA,WAAW,CAACG,IAAZ,CAAkBC,KAAD,IAAW;AAC1BZ,UAAAA,QAAQ,CAACS,OAAT,CAAiBF,IAAjB;AACD,SAFD;AAGD;AACF;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,GA3BD;;AA4BA,sBACE;AACE,IAAA,OAAO,EAAEX,iBADX;AAEE,IAAA,SAAS,EAAG,gBAAeP,IAAI,CAACU,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAEV,IAAI,CAACmB,IAAf;AAAqB,MAAA,GAAG,EAAEnB,IAAI,CAACoB;AAA/B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKpB,IAAI,CAACmB;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKnB,IAAI,CAACqB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjDD;;KAAMtB,W;AAmDN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\nimport { playAudio } from \"../util\";\r\n\r\nconst LibrarySong = ({\r\n  song,\r\n  songs,\r\n  setCurrentSong,\r\n  id,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n}) => {\r\n  const songSelectHandler = () => {\r\n    setCurrentSong(song);\r\n    //Add active state\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n    setSongs(newSongs);\r\n    play;\r\n    if (isPlaying) {\r\n      const playPromise = audioRef.current.play();\r\n      if (playPromise !== undefined) {\r\n        playPromise.then((audio) => {\r\n          audioRef.current.play();\r\n        });\r\n      }\r\n    }\r\n    console.log(\"hi\");\r\n  };\r\n  return (\r\n    <div\r\n      onClick={songSelectHandler}\r\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\r\n    >\r\n      <img alt={song.name} src={song.cover}></img>\r\n      <div className=\"song-description\">\r\n        <h3>{song.name}</h3>\r\n        <h4>{song.artist}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LibrarySong;\r\n"]},"metadata":{},"sourceType":"module"}